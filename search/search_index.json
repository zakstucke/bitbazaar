{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BitBazaar","text":"<p>An assortment of publicly available cross-language utilities useful to my projects.</p>"},{"location":"#python","title":"Python","text":"<p>You can install BitBazaar via pip from PyPI:</p> <pre><code>pip install bitbazaar\n</code></pre>"},{"location":"#javascript","title":"Javascript","text":"<p>You can install BitBazaar via npm:</p> <pre><code>npm install bitbazaar\n</code></pre>"},{"location":"#rust-backed-python-library","title":"Rust-backed Python library","text":"<p>You can install BitBazaar via pip from PyPI:</p> <pre><code>pip install bitbazaar_rs\n</code></pre> <p>Binaries are available for:</p> <ul> <li>Linux: <code>x86_64</code>, <code>aarch64</code>, <code>i686</code>, <code>armv7</code>, <code>ppc64le</code>, <code>s390x</code>,  <code>musl-x86_64</code> &amp; <code>musl-aarch64</code></li> <li>MacOS: <code>x86_64</code>, <code>aarch64</code></li> <li>Windows: <code>x86_64</code>, <code>aarch64</code>, <code>i686</code></li> </ul> <p>If your platform isn't supported, file an issue.</p>"},{"location":"#rust","title":"Rust","text":"<p>You can install BitBazaar via crates.io:</p> <pre><code># Cargo.toml\n\n[dependencies]\nbitbazaar = \"0.0.34\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Please see the documentation for details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are very welcome. To learn more, see the Contributor Guide.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the terms of the MIT license, BitBazaar is free and open source software.</p>"},{"location":"#issues","title":"Issues","text":"<p>If you encounter any problems, please file an issue along with a detailed description.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,     and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall     community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of     any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,     without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a     professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zakstucke@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributor Guide","text":"<p>Thank you for your interest in improving this project.</p> <p>This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"CONTRIBUTING/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and core package versions are you using? (the applicable of rust/python/node etc)</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"CONTRIBUTING/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"CONTRIBUTING/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<ul> <li>Clone the repo: <code>git clone https://github.com/zakstucke/bitbazaar</code></li> <li>Install <code>pipx</code></li> <li><code>./dev_scripts/initial_setup.sh initial_setup</code></li> </ul>"},{"location":"CONTRIBUTING/#python","title":"Python","text":"<ul> <li>Make sure Python 3.11+ is installed</li> <li>Install <code>PDM</code></li> </ul>"},{"location":"CONTRIBUTING/#js","title":"JS:","text":"<ul> <li>Install <code>node</code> 20 or greater</li> <li>Install <code>npx</code> globally</li> </ul>"},{"location":"CONTRIBUTING/#rust-backed-python-library","title":"Rust-backed Python library","text":"<ul> <li>Make sure Python 3.11+ is installed</li> <li>Install <code>rust</code></li> </ul>"},{"location":"CONTRIBUTING/#rust","title":"Rust:","text":"<ul> <li>Install <code>rust</code></li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running tests","text":"<p>Checkout scripts in <code>./dev_scripts/</code> for how the system can be run, <code>test.sh</code> in particular. Run the full test suite with <code>./dev_scripts/test.sh all</code></p>"},{"location":"CONTRIBUTING/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li><code>./dev_scripts/test.sh all</code> passes without failures or warnings.</li> <li>Include unit tests. This project maintains 100% code coverage.</li> <li>If your changes add functionality, update the documentation accordingly.</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright \u00a9 2024 Zachary Stucke</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"py_ref/","title":"bitbazaar","text":"<p>BitBazaar.</p>"},{"location":"py_ref/SUMMARY/","title":"SUMMARY","text":"<ul> <li>bitbazaar<ul> <li>log</li> <li>misc</li> <li>testing</li> </ul> </li> </ul>"},{"location":"py_ref/log/","title":"log","text":"<p>Global tracing implementation for open telemetry, console and file sinks.</p>"},{"location":"py_ref/log/#py.bitbazaar.log.GlobalLog","title":"<code>GlobalLog(service_name, service_version, console=None, otlp=None, file=None)</code>","text":"<p>Initialize logs, traces/spans and metrics for a project.</p> <p>Logging: normal <code>.debug()/.info()/.warn()</code> etc methods available.</p> <p>Tracing/spans: <code>.span()</code> can be used to create a new span, or as a decorator to wrap functions.</p> <p>Metrics: <code>.get_meter()</code> can be used.</p> <p>Auto-instrumentation: <code>self.meter_provider/tracer_provider/logger_provider</code> are exposed from the instance to allow interaction with auto instrumentation libraries.</p> <p>If open telemetry used, is opinionated in the fact it should be speaking to a local collector via grpc insecurely on localhost with no headers, only the port can be configured. The collector itself should be post-processing speaking to the outside world, to minimise tracing's impact on this program's performance.</p> Source code in <code>py/bitbazaar/log/_global_log.py</code> <pre><code>def __init__(\n    self,\n    service_name: str,\n    service_version: str,\n    console: ConsoleSink | None = None,\n    otlp: OLTPSink | None = None,\n    file: FileSink | None = None,\n):\n    \"\"\"Initialize logs, traces/spans and metrics for a project.\n\n    Logging: normal `.debug()/.info()/.warn()` etc methods available.\n\n    Tracing/spans: `.span()` can be used to create a new span, or as a decorator to wrap functions.\n\n    Metrics: `.get_meter()` can be used.\n\n    Auto-instrumentation: `self.meter_provider/tracer_provider/logger_provider` are exposed from the instance to allow interaction with auto instrumentation libraries.\n\n    If open telemetry used, is opinionated in the fact it should be speaking to a local collector via grpc insecurely on localhost with no headers, only the port can be configured.\n    The collector itself should be post-processing speaking to the outside world, to minimise tracing's impact on this program's performance.\n    \"\"\"\n    (\n        self.meter_provider,\n        self.tracer_provider,\n        self.logger_provider,\n        self.file_handler,\n    ) = prepare_providers(\n        {\n            \"service_name\": service_name,\n            \"service_version\": service_version,\n            \"console\": console,\n            \"otlp\": otlp,\n            \"file\": file,\n        }\n    )\n    self.tracer = trace.get_tracer(\"GlobalLog\")\n\n    # Register as the global logger:\n    global _LOG\n    _LOG = self\n</code></pre>"},{"location":"py_ref/log/#py.bitbazaar.log.GlobalLog.flush","title":"<code>flush()</code>","text":"<p>Force all logs/spans through, useful when testing.</p> Source code in <code>py/bitbazaar/log/_global_log.py</code> <pre><code>def flush(self) -&gt; None:\n    \"\"\"Force all logs/spans through, useful when testing.\"\"\"\n    self.tracer_provider.force_flush()\n    self.logger_provider.force_flush()\n    self.meter_provider.force_flush()\n    if self.file_handler:\n        self.file_handler.flush()\n</code></pre>"},{"location":"py_ref/log/#py.bitbazaar.log.GlobalLog.shutdown","title":"<code>shutdown()</code>","text":"<p>Shuts/closes everything down.</p> Source code in <code>py/bitbazaar/log/_global_log.py</code> <pre><code>def shutdown(self) -&gt; None:\n    \"\"\"Shuts/closes everything down.\"\"\"\n    self.tracer_provider.shutdown()\n    self.logger_provider.shutdown()\n    self.meter_provider.shutdown()\n    if self.file_handler:\n        self.file_handler.close()\n</code></pre>"},{"location":"py_ref/log/#py.bitbazaar.log.GlobalLog.span","title":"<code>span(name, context=None, kind=SpanKind.INTERNAL, attributes=None, links=None, start_time=None, record_exception=True, set_status_on_exception=True, end_on_exit=True)</code>","text":"<p>Context manager for creating a new span and set it as the current span in this tracer's context.</p> <p>Exiting the context manager will call the span's end method, as well as return the current span to its previous value by returning to the previous context.</p> <p>Example::</p> <pre><code>with tracer.start_as_current_span(\"one\") as parent:\n    parent.add_event(\"parent's event\")\n    with tracer.start_as_current_span(\"two\") as child:\n        child.add_event(\"child's event\")\n        trace.get_current_span()  # returns child\n    trace.get_current_span()      # returns parent\ntrace.get_current_span()          # returns previously active span\n</code></pre> <p>This is a convenience method for creating spans attached to the tracer's context. Applications that need more control over the span lifetime should use :meth:<code>start_span</code> instead. For example::</p> <pre><code>with tracer.start_as_current_span(name) as span:\n    do_work()\n</code></pre> <p>is equivalent to::</p> <pre><code>span = tracer.start_span(name)\nwith opentelemetry.trace.use_span(span, end_on_exit=True):\n    do_work()\n</code></pre> <p>This can also be used as a decorator::</p> <pre><code>@tracer.start_as_current_span(\"name\")\ndef function():\n    ...\n\nfunction()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the span to be created.</p> required <code>context</code> <code>Context | None</code> <p>An optional Context containing the span's parent. Defaults to the global context.</p> <code>None</code> <code>kind</code> <code>SpanKind</code> <p>The span's kind (relationship to parent). Note that is meaningful even if there is no parent.</p> <code>INTERNAL</code> <code>attributes</code> <code>Attributes</code> <p>The span's attributes.</p> <code>None</code> <code>links</code> <code>_Links</code> <p>Links span to other spans</p> <code>None</code> <code>start_time</code> <code>int | None</code> <p>Sets the start time of a span</p> <code>None</code> <code>record_exception</code> <code>bool</code> <p>Whether to record any exceptions raised within the context as error event on the span.</p> <code>True</code> <code>set_status_on_exception</code> <code>bool</code> <p>Only relevant if the returned span is used in a with/context manager. Defines whether the span status will be automatically set to ERROR when an uncaught exception is raised in the span with block. The span status won't be set by this mechanism if it was previously set manually.</p> <code>True</code> <code>end_on_exit</code> <code>bool</code> <p>Whether to end the span automatically when leaving the context manager.</p> <code>True</code> <p>Yields:</p> Type Description <p>The newly-created span.</p> Source code in <code>py/bitbazaar/log/_global_log.py</code> <pre><code>def span(\n    self,\n    name: str,\n    context: Context | None = None,\n    kind: SpanKind = SpanKind.INTERNAL,\n    attributes: Attributes = None,\n    links: _Links = None,\n    start_time: int | None = None,\n    record_exception: bool = True,\n    set_status_on_exception: bool = True,\n    end_on_exit: bool = True,\n):\n    \"\"\"Context manager for creating a new span and set it as the current span in this tracer's context.\n\n    Exiting the context manager will call the span's end method,\n    as well as return the current span to its previous value by\n    returning to the previous context.\n\n    Example::\n\n        with tracer.start_as_current_span(\"one\") as parent:\n            parent.add_event(\"parent's event\")\n            with tracer.start_as_current_span(\"two\") as child:\n                child.add_event(\"child's event\")\n                trace.get_current_span()  # returns child\n            trace.get_current_span()      # returns parent\n        trace.get_current_span()          # returns previously active span\n\n    This is a convenience method for creating spans attached to the\n    tracer's context. Applications that need more control over the span\n    lifetime should use :meth:`start_span` instead. For example::\n\n        with tracer.start_as_current_span(name) as span:\n            do_work()\n\n    is equivalent to::\n\n        span = tracer.start_span(name)\n        with opentelemetry.trace.use_span(span, end_on_exit=True):\n            do_work()\n\n    This can also be used as a decorator::\n\n        @tracer.start_as_current_span(\"name\")\n        def function():\n            ...\n\n        function()\n\n    Args:\n        name: The name of the span to be created.\n        context: An optional Context containing the span's parent. Defaults to the\n            global context.\n        kind: The span's kind (relationship to parent). Note that is\n            meaningful even if there is no parent.\n        attributes: The span's attributes.\n        links: Links span to other spans\n        start_time: Sets the start time of a span\n        record_exception: Whether to record any exceptions raised within the\n            context as error event on the span.\n        set_status_on_exception: Only relevant if the returned span is used\n            in a with/context manager. Defines whether the span status will\n            be automatically set to ERROR when an uncaught exception is\n            raised in the span with block. The span status won't be set by\n            this mechanism if it was previously set manually.\n        end_on_exit: Whether to end the span automatically when leaving the\n            context manager.\n\n    Yields:\n        The newly-created span.\n    \"\"\"\n    return self.tracer.start_as_current_span(\n        name,\n        context,\n        kind,\n        attributes,\n        links,\n        start_time,\n        record_exception,\n        set_status_on_exception,\n        end_on_exit,\n    )\n</code></pre>"},{"location":"py_ref/misc/","title":"misc","text":"<p>Miscellaneous utility functions for BitBazaar.</p>"},{"location":"py_ref/misc/#py.bitbazaar.misc.copy_sig","title":"<code>copy_sig(f)</code>","text":"<p>Keep e.g. a class's init signature when subclassing.</p> <p>From: https://github.com/python/typing/issues/769#issuecomment-903760354</p> Source code in <code>py/bitbazaar/misc/__init__.py</code> <pre><code>def copy_sig(f: _T) -&gt; tp.Callable[[tp.Any], _T]:\n    \"\"\"Keep e.g. a class's __init__ signature when subclassing.\n\n    From: https://github.com/python/typing/issues/769#issuecomment-903760354\n    \"\"\"\n    return lambda x: x\n</code></pre>"},{"location":"py_ref/misc/#py.bitbazaar.misc.in_ci","title":"<code>in_ci()</code>","text":"<p>Returns true if it looks like the program is running from a CI service, e.g. Github Actions.</p> Source code in <code>py/bitbazaar/misc/__init__.py</code> <pre><code>def in_ci() -&gt; bool:\n    \"\"\"Returns true if it looks like the program is running from a CI service, e.g. Github Actions.\"\"\"\n    return any([var in os.environ for var in _CI_ENV_VARS])\n</code></pre>"},{"location":"py_ref/misc/#py.bitbazaar.misc.is_tcp_port_listening","title":"<code>is_tcp_port_listening(host, port)</code>","text":"<p>Check if something is listening on a certain tcp port or not.</p> Source code in <code>py/bitbazaar/misc/__init__.py</code> <pre><code>def is_tcp_port_listening(\n    host: str, port: int\n) -&gt; bool:  # pragma: no cover (is covered but not in CI)\n    \"\"\"Check if something is listening on a certain tcp port or not.\"\"\"\n    try:\n        # Create a TCP socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(1)  # Set timeout to 1 second\n\n        # Attempt to establish a connection to the port\n        s.connect((host, port))\n\n        # If connection is successful, something is listening on the port\n        s.close()\n        return True\n    except OSError:\n        return False\n</code></pre>"},{"location":"py_ref/testing/","title":"testing","text":"<p>Useful downstream testing utilities.</p>"},{"location":"py_ref/testing/#py.bitbazaar.testing.TmpFileManager","title":"<code>TmpFileManager()</code>","text":"<p>A context manager for managing temporary files and directories.</p> <p>Usage: with TmpFileManager() as manager:     file_path = manager.tmpfile(content=\"Hello, temporary file!\")     dir_path = manager.tmp_dir()</p> Source code in <code>py/bitbazaar/testing/_tmp_file_manager.py</code> <pre><code>def __init__(self):\n    self.root_dir = tempfile.mkdtemp()\n</code></pre>"},{"location":"py_ref/testing/#py.bitbazaar.testing.TmpFileManager.cleanup","title":"<code>cleanup()</code>","text":"<p>Clean up created temporary files and directories.</p> Source code in <code>py/bitbazaar/testing/_tmp_file_manager.py</code> <pre><code>def cleanup(self):\n    \"\"\"Clean up created temporary files and directories.\"\"\"\n    shutil.rmtree(self.root_dir)\n</code></pre>"},{"location":"py_ref/testing/#py.bitbazaar.testing.TmpFileManager.tmpdir","title":"<code>tmpdir(parent=None, name=None)</code>","text":"<p>Create a temporary directory.</p> <p>Parameters: - parent: Optional directory to create the temporary directory in. Otherwise will be placed in root.</p> <p>Returns: - The path to the created temporary directory.</p> Source code in <code>py/bitbazaar/testing/_tmp_file_manager.py</code> <pre><code>def tmpdir(\n    self, parent: tp.Optional[str] = None, name: tp.Optional[str] = None\n) -&gt; pathlib.Path:\n    \"\"\"Create a temporary directory.\n\n    Parameters:\n    - parent: Optional directory to create the temporary directory in. Otherwise will be placed in root.\n\n    Returns:\n    - The path to the created temporary directory.\n    \"\"\"\n    if parent is None:\n        parent = self.root_dir\n\n    final_path = pathlib.Path(os.path.join(parent, str(uuid.uuid4()) if name is None else name))\n    os.mkdir(final_path)\n\n    self.dirs_created += 1\n    return final_path\n</code></pre>"},{"location":"py_ref/testing/#py.bitbazaar.testing.TmpFileManager.tmpfile","title":"<code>tmpfile(content, suffix=None, parent=None, full_name=None)</code>","text":"<p>Create a temporary file.</p> <p>Parameters: - content: The content to write to the temporary file. - suffix: Optional suffix to append to the temporary file. Otherwise will be created with tempfile. - parent: Optional directory to create the temporary file in. Otherwise will be placed in root. - full_name: Optional full name of the temporary file, overrides suffix. Otherwise will be created with tempfile.</p> <p>Returns: - The path to the created temporary file.</p> Source code in <code>py/bitbazaar/testing/_tmp_file_manager.py</code> <pre><code>def tmpfile(\n    self,\n    content: str,\n    suffix: tp.Optional[str] = None,\n    parent: tp.Optional[tp.Union[str, pathlib.Path]] = None,\n    full_name: tp.Optional[str] = None,\n) -&gt; pathlib.Path:\n    \"\"\"Create a temporary file.\n\n    Parameters:\n    - content: The content to write to the temporary file.\n    - suffix: Optional suffix to append to the temporary file. Otherwise will be created with tempfile.\n    - parent: Optional directory to create the temporary file in. Otherwise will be placed in root.\n    - full_name: Optional full name of the temporary file, overrides suffix. Otherwise will be created with tempfile.\n\n    Returns:\n    - The path to the created temporary file.\n    \"\"\"\n    if parent is None:\n        parent = self.root_dir\n\n    filename: str\n    if full_name is not None:\n        filename = full_name\n    elif suffix is not None:\n        filename = str(uuid.uuid4()) + suffix\n    else:\n        filename = str(uuid.uuid4())\n\n    final_path = pathlib.Path(os.path.join(parent, filename))\n\n    with open(final_path, \"w\") as file:\n        file.write(content)\n\n    self.files_created += 1\n\n    return final_path\n</code></pre>"},{"location":"py_rust_ref/","title":"bitbazaar_rs","text":""},{"location":"py_rust_ref/#py_rust.python.bitbazaar_rs.hello","title":"<code>hello()</code>","text":"<p>Returns Hello, World!</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Hello, World!</p> Source code in <code>py_rust/python/bitbazaar_rs/__init__.py</code> <pre><code>from importlib.metadata import version\n\n__version__ = version(\"bitbazaar_rs\")\n\n__all__ = [\"__version__\"]\n\n# Import the rust modules and top level fns:\n</code></pre>"},{"location":"py_rust_ref/SUMMARY/","title":"SUMMARY","text":"<ul> <li>bitbazaar_rs<ul> <li>utils</li> </ul> </li> </ul>"},{"location":"py_rust_ref/utils/","title":"utils","text":""},{"location":"py_rust_ref/utils/#py_rust.python.bitbazaar_rs.utils.add","title":"<code>add(a, b)</code>","text":"<p>Add two numbers.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>First number.</p> required <code>b</code> <code>float</code> <p>Second number.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Sum of the two numbers.</p> Source code in <code>py_rust/python/bitbazaar_rs/utils.pyi</code> <pre><code>def add(a: float, b: float) -&gt; float:\n    \"\"\"Add two numbers.\n\n    Args:\n        a: First number.\n        b: Second number.\n\n    Returns:\n        Sum of the two numbers.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"rust_ref/doc/static.files/SourceSerif4-LICENSE-3bb119e13b1258b7/","title":"SourceSerif4 LICENSE 3bb119e13b1258b7","text":"<p>Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries. Copyright 2014 - 2023 Adobe (http://www.adobe.com/), with Reserved Font Name \u2018Source\u2019. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.</p> <p>This Font Software is licensed under the SIL Open Font License, Version 1.1.</p> <p>This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL</p>"},{"location":"rust_ref/doc/static.files/SourceSerif4-LICENSE-3bb119e13b1258b7/#sil-open-font-license-version-11-26-february-2007","title":"SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007","text":"<p>PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.</p> <p>The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.</p> <p>DEFINITIONS \"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.</p> <p>\"Reserved Font Name\" refers to any names specified as such after the copyright statement(s).</p> <p>\"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s).</p> <p>\"Modified Version\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.</p> <p>\"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.</p> <p>PERMISSION &amp; CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:</p> <p>1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.</p> <p>2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.</p> <p>3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.</p> <p>4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.</p> <p>5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.</p> <p>TERMINATION This license becomes null and void if any of the above conditions are not met.</p> <p>DISCLAIMER THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.</p>"}]}