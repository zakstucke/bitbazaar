ignore_files:
    - .gitignore

context:
    - PY_VERSION:
          type: cli
          value: ./dev_scripts/pkg.sh ver_py
    - JS_VERSION:
          type: cli
          value: ./dev_scripts/pkg.sh ver_js
    - JS_ALIASES: { "@root": "./bitbazaar", "@scripts": "./scripts" }
    - RUST_VERSION:
          type: cli
          value: ./dev_scripts/pkg.sh ver_rust
    - PY_RUST_VERSION:
          type: cli
          value: ./dev_scripts/pkg.sh ver_py_rust
# EXAMPLE CONFIG:
# # Git-style ignore files to read, respect & exclude for the search:
# ignore_files:
#     - .gitignore
# # Commands to populate the environment
# # with extra temporary variables that context will read from.
# setup:
#     - export FOO="Hello, World!"
#     - ./scripts/etch_env_setup.sh

# # Variables to pass to the templater.
# context:
#     - MY_VAR: "Goodbye, World!"
#     # When no value is given, the variable is read from the environment:
#     - FOO
#     # A wildcard will signify all environment variables should be passed as context:
#     # - "*" # BE CAREFUL, SECURITY!

# # Extra git-style rules to respect & exclude for the search:
# exclude: [tests/, foo.bar.*.txt]

# # Config to pass to Jinja to modify compilation.
# # https://jinja.palletsprojects.com/en/3.0.x/api/#jinja2.Environment
# jinja:
#     # (These are the existing defaults for the most common config, more is avail in the link above)
#      block_start_string: "{%"
#      block_end_string: "%}"
#      variable_start_string: "{{"
#      variable_end_string: "}}"
#      comment_start_string: "{#"
#      comment_end_string: "#}"
