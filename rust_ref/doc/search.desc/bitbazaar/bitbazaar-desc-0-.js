searchState.loadedDescShard("bitbazaar", 0, "bitbazaar - An assortment of publicly available …\nA macro for building <code>Report&lt;AnyErr&gt;</code> objects with string …\nChrono utilities\nCommand line interface utilities.\nA macro for building <code>Report&lt;ArbitraryErrorStackErr&gt;</code> …\nError handling utilities.\nHashing utilities.\nLogging utilities\nCompletely miscellaneous utilities\nWhen working in a function that cannot return a result, …\nWhen working in a function that cannot return a result, …\nRedis utilities\nConcurrency/parallelism utilities\nTime a block of code and log to the global time recorder.\nTiming utilities\nWarn a user once, with uniqueness determined by the …\nWarn a user once, with uniqueness determined by the given …\nConvert a chrono datetime to the local timezone.\nFormats a <code>chrono::DateTime</code>, also localising it to the user…\nFormats a <code>chrono::Duration</code>` in the present case. Arguments:\nExecute an arbitrary bash script.\nUser facing error type for Bash functionality.\nBashFeatureUnsupported\nThe result of running a command\nBashSyntaxError\nThe result of an individual command.\nInternalError\nGet the BashOut from the error.\nSet the root directory to run the commands in.\nAdd a new piece of logic to the bash script. E.g. a line …\nReturns the exit code of the last command that was run.\nThe exit code of the command\nThe command that was run\nAll commands that were run, if a command fails, it will be …\nAdd an environment variable to the bash script.\nPretty format the attempted commands, with the exit code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the stdout AND stderr from the final command that …\nReturns the stderr from the final command that was run.\nReturns the stdout from the final command that was run.\nCreate a new <code>Bash</code> builder.\nExecute the current contents of the bash script.\nCombines the stdout AND stderr from each run command into …\nCombines the stderr from each run command into a single …\nThe stderr of the command\nCombines the stdout from each run command into a single …\nThe stdout of the command\nReturns true when the command exited with a zero exit code.\nThrow an error if the last command run was not successful.\nA generic trace_stack error to use when you don’t want …\nContains the error value\nContains the success value\nShorthand for a <code>Result</code> with a [<code>Report</code>] as the error variant\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasily import all useful error items. Useful to put inside …\nThe <code>Context</code> type of the <code>Result</code>.\nType of the <code>Ok</code> value in the <code>Result</code>\nContains a <code>Frame</code> stack consisting of <code>Context</code>s and …\nExtension trait for <code>Result</code> to provide context information …\nA macro for building <code>Report&lt;AnyErr&gt;</code> objects with string …\nReturns this <code>Report</code> as an <code>Error</code>.\nAdds a new attachment to the <code>Report</code> inside the <code>Result</code>.\nAdds additional information to the <code>Frame</code> stack.\nLazily adds a new attachment to the <code>Report</code> inside the …\nAdds a new printable attachment to the <code>Report</code> inside the …\nAdds additional (printable) information to the <code>Frame</code> stack.\nLazily adds a new printable attachment to the <code>Report</code> …\nChanges the context of the <code>Report</code> inside the <code>Result</code>.\nAdd a new <code>Context</code> object to the top of the <code>Frame</code> stack, …\nLazily changes the context of the <code>Report</code> inside the <code>Result</code>.\nReturns if <code>T</code> is the type held by any frame inside of the …\nReturns the current context of the <code>Report</code>.\nReturn the direct current frames of this report, to get an …\nSearches the frame stack for an instance of type <code>T</code>, …\nSearches the frame stack for a context provider <code>T</code> and …\nA macro for building <code>Report&lt;ArbitraryErrorStackErr&gt;</code> …\nMerge two <code>Report</code>s together\nReturns an iterator over the <code>Frame</code> stack of the report.\nReturns an iterator over the <code>Frame</code> stack of the report …\nReturns the argument unchanged.\nCan be used to globally set a <code>Debug</code> format hook, for a …\nCalls <code>U::from(self)</code>.\nConverts this <code>Report</code> to an <code>Error</code>.\nCreates a new <code>Report&lt;Context&gt;</code> from a provided scope.\nWhen working in a function that cannot return a result, …\nWhen working in a function that cannot return a result, …\nSet the charset preference\nSet the color mode preference\nFNV1a hash function. Note this is completely insecure, and …\nSHA256 hash function.\nThe global logger/tracer for stdout, file and full open …\nThe global log builder. See the <code>GlobalLog</code> struct for more …\nBuild the global log from the configured builder.\nCreate a builder to configure the global logger.\nWrite to a custom writer.\nWrite to a file:\nForce through logs, traces and metrics, useful in e.g. …\nSee <code>super::global_fns::flush</code>`\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default <code>opentelemetry::metrics::Meter</code> for the …\nAutomatically record system metrics: SYSTEM WIDE:\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum level to log for.\nA regex that must be satisfied for a log to be accepted by …\nReturns a new <code>opentelemetry::metrics::Meter</code> with the …\nSee <code>super::global_fns::meter</code>`\nOpentelemetry types that might be needed downstream. The …\nWrite to an open telemetry provider via grpc. This works …\nWrite to an open telemetry provider via http. This works …\nRecord an exception to the currently active span. Matches …\nRegister the logger as the global logger/tracer/metric …\nSet the response headers from the current span context. So …\nSee <code>super::global_fns::set_response_headers_from_ctx</code>`\nConnect this program’s span to the trace that is …\nSee <code>super::global_fns::set_span_parent_from_http_headers</code>`\nA managed wrapper on creation of the GlobalLog and …\nShutdown the logger, traces and metrics, should be called …\nSee <code>super::global_fns::shutdown</code>`\nWrite to stdout:\nTemporarily make the logger global, for the duration of …\nArray of homogeneous values\nbool values\nf64 values\ni64 values\nThe key part of attribute KeyValue pairs.\nA key-value pair describing an attribute.\nString values\nWrapper for string-like values\nThe value part of attribute KeyValue pairs.\nCreate a <code>KeyValue</code> pair for arrays.\nReturns a reference to the underlying key name\nString representation of the <code>Value</code>\nReturns a string slice to this value\nCreate a <code>KeyValue</code> pair for <code>bool</code> values.\nCreate a <code>KeyValue</code> pair for <code>f64</code> values.\nConvert a <code>&amp;str</code> to a <code>Key</code>.\nConvert a <code>String</code> to a <code>Key</code>.\nConvert a <code>String</code> to a <code>Key</code>.\nReturns the argument unchanged.\nConvert a <code>Cow&lt;&#39;static, str&gt;</code> to a <code>Key</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new const <code>Key</code>.\nCreate a <code>KeyValue</code> pair for <code>i64</code> values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe attribute name\nOtlp metric types.\nCreate a new <code>Key</code>.\nCreate a new <code>KeyValue</code> pair.\nCreate a <code>KeyValue</code> pair for string-like values.\nThe attribute value\nAn instrument that records increasing values.\nAn instrument that records a distribution of values.\nAn async instrument that records increasing values.\nAn instrument that records independent readings.\nAn async instrument that records increasing or decreasing …\nAn SDK implemented instrument that records increasing …\nAn SDK implemented instrument that records a distribution …\nAn SDK implemented instrument that records increasing or …\nUnits denote underlying data units tracked by <code>Meter</code>s.\nAn instrument that records increasing or decreasing values.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nRecords an increment to the counter.\nRecords an increment or decrement to the counter.\nUsed for SDKs to downcast instruments in callbacks.\nUsed by SDKs to downcast instruments in callbacks.\nUsed for SDKs to downcast instruments in callbacks.\nView unit as &amp;str\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new counter.\nCreate a new observable counter.\nCreate a new gauge\nCreate a new histogram.\nCreate a new up down counter.\nCreate a new observable up down counter.\nCreate a new <code>Unit</code> from an <code>Into&lt;String&gt;</code>\nRecords an increment to the counter.\nRecords the state of the instrument.\nRecords the increment or decrement to the counter.\nAdds an additional value to the distribution.\nAdds an additional value to the distribution.\nAn interface that can be used to track arbitrary logging …\nA periodic updater. Run a callback at a specified time …\nInformation about the last retry attempt.\nBinary search for the desired item in the array. Returns …\nBinary search for the desired item in the array. Only …\nByte manipulation utilities, e.g. transfer speed.\nThe delay until the next attempt.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the current process seems to be running in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a port is listening for a given ipv4 address and …\nThe number of the last attempt. E.g. first attempt failing …\nThe error that caused the last attempt to fail.\nLog a debug message.\nLog a debug message.\nLog an error message.\nLog an error message.\nLog an info message.\nLog an info message.\nLog a warning message.\nLog a warning message.\nUnderlying log adder with more options. If the actual …\nCall this function frequently to check if the callback …\nCreate a new PeriodicUpdater. Make sure to call …\nWill attempt execute the fn’s returned future according …\nSet the current progress. Depending on the underlying imp …\nConvert bytes to megabits per second.\nPrettify bytes into a string for a user using the 1000 …\nPrettify bytes into a string for a user using the 1024 …\nDerive macro for the redis crate’s <code>FromRedisValue</code> trait …\nInternal error.\nThe producer for the next batch struct sig.\nA wrapper around redis to make it more concise to use and …\nA command builder struct. Committed with <code>RedisBatch::fire</code>.\nTrait implementing the fire() method on a batch, variable …\nImplements all the supported redis operations that need to …\nWrapper around a lazy redis connection.\nA wrapper on an arbitrary json object to allow reading and …\nA borrowed wrapper on an arbitrary json object to writing …\nA distributed lock for Redis.\nErrors that can occur when trying to lock a resource.\nA lua script wrapper. Should be created once per script.\nRepresents a individual script call with specific args and …\nStandalone redis client, using a unique free port. Useful …\nConnect up to a magic redis list that:\nA user friendly interface around a redis list item, …\nA wrapped item, with a connection too, preventing need to …\nThe final return type of the batch.\nDerive macro for the redis crate’s <code>ToRedisArgs</code> trait to …\nWhen the lock is held by someone else.\nWhen the user has done something wrong.\nAdd a regular argument. I.e. <code>ARGV[i]</code>\nGet a new <code>RedisBatch</code> for this connection that commands can …\nCache an async function in redis with an optional expiry. …\nClear one or more keys.\nClear all the items in the list. (by just deleting the …\nClear all keys under a given namespace\nGet a <code>RedisConn</code> redis can be called with.\nDelete the item from the list. Will be a no-op of the item …\nDelete a specific item given it’s uid.\nDelete multiple items via their ids.\nGet a distributed redis lock.\nGet a distributed redis lock that is held for the duration …\nCheck if a key exists.\nExpire an existing key with a new/updated ttl.\nThe time at which the lock will expire. Must be renewed …\nExtend the lifetime of the lock from the previous ttl. …\nAdd multiple items to the sorted list. Purposely using one …\nRedis keys are all prefixed, use this to finalise a key …\nRedis keys are all prefixed, use this to finalise a …\nCommit the batch and return the result. If redis …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from a key. Returning <code>None</code> if the key doesn’…\nUsed for dlock, the dlock algo is setup with multiple …\nGet an internal connection from the pool, connections are …\nEscape hatch, access the inner deadpool_redis pool.\nInternal dlock extension/management. Maintain and extend …\nGet a new <code>Redis</code> instance connected to this standalone …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the holder, returning the item, if it exists.\nCreate a new script invoker for an individual script call.\nSee <code>RedisTempListItem::item</code>\nAccess the underlying item, if it exists.\nIf an item hasn’t been read or written to in this time, …\nAdd a key argument. I.e. <code>KEYS[i]</code>\nThe key of the list in redis\nIf the list hasn’t been read or written to in this time, …\nThe resource to lock. A combination of the namespace with …\nCheck if multiple keys exists.\nGet multiple values (MGET) of the same type at once. …\nSet multiple values (MSET) of the same type at once. If …\nThe namespace of the list in redis (should come in as …\nStart a standalone redis server process on an unused port. …\nCreate the script object. Use <code>include_str!()</code> to allow the …\nCreate a new holder for a redis list item. All optional to …\nCreate a new global redis wrapper from the given Redis URL …\nCreate a dummy holder for a redis list item, useful when …\nPing redis, returning true if it’s up.\nThe port the redis server is running on.\nAdd a new item to the sorted list.\nRead a specific item given it’s uid.\nRead multiple items from the list, ordered from last …\nUnderlying of <code>RedisTempList::read_multi</code>, but returns the …\nSee <code>RedisTempListItem::replace</code>\nReplace the contents of an item in the redis list with …\nRun an arbitrary redis (lua script).\nRun an arbitrary redis (lua script). But discards any …\nSet a key to a value with an optional expiry.\nConnect up to a magic redis list that:\nSee <code>RedisTempListItem::uid</code>\nAccess the underlying item’s uid, if it exists.\nUnlock the lock manually. Not necessarily needed, the lock …\nSee <code>RedisTempListItem::update</code>\nFully manage the update of an item back to redis. This …\nUpdate a specific item given it’s uid.\nSee <code>RedisTempListItem::update_async</code>\nFully manage the update of an item back to redis. (Async …\nThe value for this lock.\nUseful helper utility to just get a vec of valid items …\nHow long to wait before giving up trying to get the lock.\nUseful for combining a connection with an item, to prevent …\nAdd an entry to an ordered set (auto creating the set if …\nAdd multiple entries at once to an ordered set (auto …\nHIGHEST TO LOWEST SCORES. Retrieve entries from an ordered …\nLOWEST TO HIGHEST SCORES. Retrieve entries from an ordered …\nremove an entries from an ordered set. …\nRemove entries from an ordered set by score range. (range …\nHow batched futures are limited, either using a parent’s …\nThe entrypoint, where the total limit is set.\nThis level is limited by the parent’s config.\nBatch run futures but with a limiter on parents and …\nUnderlying of <code>batch_futures_descendants</code>, use if need to …\nUnderlying of <code>batch_futures_descendants</code>, use if need to …\nA simple and performant runner for an iterator of future …\nA more performant version of <code>batch_futures_descendants</code> due …\nA more performant version of <code>batch_futures_descendants</code> due …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe following link explains the distinction between normal …\nA global time recorder, used by the timeit! macro.\nA struct for recording time spent in various blocks of …\nFormat a duration in a human readable format.\nFormat the logs in a verbose, table format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new time recorder.\nTime a block of code and log to the time recorder.\nUsing from creation time rather than the specific …")