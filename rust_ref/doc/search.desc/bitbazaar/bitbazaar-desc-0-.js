searchState.loadedDescShard("bitbazaar", 0, "bitbazaar - An assortment of publicly available …\nA macro for building <code>Report&lt;AnyErr&gt;</code> objects with string …\nCommand line interface utilities.\nA macro for building <code>Report&lt;ArbitraryErrorStackErr&gt;</code> …\nError handling utilities.\nHashing utilities.\nLogging utilities\nCompletely miscellaneous utilities\nWhen working in a function that cannot return a result, …\nWhen working in a function that cannot return a result, …\nRedis utilities\nTime a block of code and log to the global time recorder.\nTiming utilities\nWarn a user once, with uniqueness determined by the …\nWarn a user once, with uniqueness determined by the given …\nExecute an arbitrary bash script.\nUser facing error type for Bash functionality.\nBashFeatureUnsupported\nThe result of running a command\nBashSyntaxError\nThe result of an individual command.\nInternalError\nGet the BashOut from the error.\nSet the root directory to run the commands in.\nAdd a new piece of logic to the bash script. E.g. a line …\nReturns the exit code of the last command that was run.\nThe exit code of the command\nThe command that was run\nAll commands that were run, if a command fails, it will be …\nAdd an environment variable to the bash script.\nPretty format the attempted commands, with the exit code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the stdout AND stderr from the final command that …\nReturns the stderr from the final command that was run.\nReturns the stdout from the final command that was run.\nCreate a new <code>Bash</code> builder.\nExecute the current contents of the bash script.\nCombines the stdout AND stderr from each run command into …\nCombines the stderr from each run command into a single …\nThe stderr of the command\nCombines the stdout from each run command into a single …\nThe stdout of the command\nReturns true when the command exited with a zero exit code.\nThrow an error if the last command run was not successful.\nA generic trace_stack error to use when you don’t want …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFNV1a hash function. Note this is completely insecure, and …\nThe global logger/tracer for stdout, file and full open …\nThe global log builder. See the <code>GlobalLog</code> struct for more …\nBuild the global log from the configured builder.\nCreate a builder to configure the global logger.\nWrite to a custom writer.\nWrite to a file:\nForce through logs, traces and metrics, useful in e.g. …\nSee <code>super::global_fns::flush</code>`\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum level to log for.\nA regex that must be satisfied for a log to be accepted by …\nReturns a new <code>opentelemetry::metrics::Meter</code> with the …\nSee <code>super::global_fns::meter</code>`\nWrite to an open telemetry provider via grpc. This works …\nWrite to an open telemetry provider via http. This works …\nRecord an exception to the currently active span. Matches …\nRegister the logger as the global logger/tracer/metric …\nSet the response headers from the current span context. So …\nSee <code>super::global_fns::set_response_headers_from_ctx</code>`\nConnect this program’s span to the trace that is …\nSee <code>super::global_fns::set_span_parent_from_http_headers</code>`\nA managed wrapper on creation of the GlobalLog and …\nShutdown the logger, traces and metrics, should be called …\nSee <code>super::global_fns::shutdown</code>`\nWrite to stdout:\nTemporarily make the logger global, for the duration of …\nReturns true if the current process seems to be running in …\nCheck if a port is listening for a given ipv4 address and …\nThe producer for the next batch struct sig.\nA wrapper around redis to make it more concise to use and …\nA command builder struct. Committed with <code>RedisBatch::fire</code>.\nTrait implementing the fire() method on a batch, variable …\nImplements all the supported redis operations that need to …\nWrapper around a lazy redis connection.\nA wrapper on an arbitrary json object to allow reading and …\nA borrowed wrapper on an arbitrary json object to writing …\nA distributed lock for Redis.\nErrors that can occur when trying to lock a resource.\nA lua script wrapper. Should be created once per script.\nRepresents a individual script call with specific args and …\nConnect up to a magic redis list that:\nA user friendly interface around a redis list item, …\nA wrapped item, with a connection too, preventing need to …\nThe final return type of the batch.\nWhen the lock is held by someone else.\nWhen the user has done something wrong.\nAdd a regular argument. I.e. <code>ARGV[i]</code>\nGet a new <code>RedisBatch</code> for this connection that commands can …\nCache an async function in redis with an optional expiry. …\nClear one or more keys.\nClear all the items in the list. (by just deleting the …\nClear all keys under a given namespace\nGet a <code>RedisConn</code> redis can be called with.\nThe redis conn sidecar.\nDelete a specific item given it’s uid.\nGet a distributed redis lock.\nCheck if a key exists.\nExpire an existing key with a new/updated ttl.\nExtend the lifetime of the lock from the previous ttl. …\nAdd multiple items to the sorted list. Purposely using one …\nRedis keys are all prefixed, use this to finalise a key …\nRedis keys are all prefixed, use this to finalise a …\nCommit the batch and return the result. If redis …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from a key. Returning <code>None</code> if the key doesn’…\nUsed for dlock, the dlock algo is setup with multiple …\nGet an internal connection from the pool, connections are …\nEscape hatch, access the inner deadpool_redis pool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the holder, returning the item, if it exists.\nCreate a new script invoker for an individual script call.\nAccess the underlying item, if it exists.\nThe normal item holder.\nIf an item hasn’t been read or written to in this time, …\nAdd a key argument. I.e. <code>KEYS[i]</code>\nThe key of the list in redis\nIf the list hasn’t been read or written to in this time, …\nThe resource to lock. Will be used as the key in Redis.\nCheck if multiple keys exists.\nGet multiple values (MGET) of the same type at once. …\nSet multiple values (MSET) of the same type at once. If …\nThe namespace of the list in redis (should come in as …\nCreate the script object. Use <code>include_str!()</code> to allow the …\nCreate a new holder for a redis list item. All optional to …\nCreate a new global redis wrapper from the given Redis URL …\nCreate a dummy holder for a redis list item, useful when …\nAdd a new item to the sorted list.\nRead a specific item given it’s uid.\nRead multiple items from the list, ordered from last …\nUnderlying of <code>RedisTempList::read_multi</code>, but returns the …\nReplace the contents of an item in the redis list with …\nRun an arbitrary redis (lua script).\nRun an arbitrary redis (lua script). But discards any …\nSet a key to a value with an optional expiry.\nConnect up to a magic redis list that:\nAccess the underlying item’s uid, if it exists.\nUnlock the lock manually. Not necessarily needed, the lock …\nFully manage the update of an item back to redis. This …\nUpdate a specific item given it’s uid.\nThe value for this lock.\nUseful helper utility to just get a vec of valid items …\nHow long to wait before giving up trying to get the lock.\nUseful for combining a connection with an item, to prevent …\nAdd an entry to an ordered set (auto creating the set if …\nAdd multiple entries at once to an ordered set (auto …\nRetrieve entries from an ordered set by score range. …\nremove an entry to an ordered set. …\nRemove entries from an ordered set by score range. (range …\nA global time recorder, used by the timeit! macro.\nA struct for recording time spent in various blocks of …\nFormat a duration in a human readable format.\nFormat the logs in a verbose, table format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new time recorder.\nTime a block of code and log to the time recorder.\nUsing from creation time rather than the specific …")