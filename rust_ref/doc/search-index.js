var searchIndex = JSON.parse('{\
"bitbazaar":{"doc":"BitBazaar - A crate containing miscellaneous public …","t":"OOOOAAAAOOOAOONNGGLMMMFNDNNNNDDEELLLLLLLLLLLLLLLLFLLMLLLLLLLLLLLMMMLLLLLLMLMLMLLLLLLLLLLLLLLLLLLLLMMLMMMMMFHDLLLFLLLLLLLLL","n":["_aer_inner","_aer_inner_with_txt","aer","err","errors","hash","logging","misc","panic_on_err","spez","timeit","timing","warn_user_once","warn_user_once_by_id","Err","Ok","TracedErr","TracedResult","from","inner","into_response","location","fnv1a","Above","ClapLogLevelArgs","Custom","File","Only","Stdout","SubCustomWriter","SubLayer","SubLayerFilter","SubLayerVariant","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_subscriber","default","execute","filter","flush","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","include_loc","include_lvl","include_timestamp","into","into","into","into","into","level","loc_matcher","make_writer","pretty","queue","silent","sync_update","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","variant","verbose","write","write","dir","file_prefix","include_color","writer","in_ci","GLOBAL_TIME_RECORDER","TimeRecorder","borrow","borrow_mut","default","format_duration","format_verbose","from","into","new","timeit","total_elapsed","try_from","try_into","type_id"],"q":[[0,"bitbazaar"],[14,"bitbazaar::errors"],[22,"bitbazaar::hash"],[23,"bitbazaar::logging"],[102,"bitbazaar::logging::SubLayerVariant"],[106,"bitbazaar::misc"],[107,"bitbazaar::timing"],[122,"core::error"],[123,"core::marker"],[124,"clap_builder::builder::command"],[125,"alloc::vec"],[126,"error_stack::result"],[127,"std::io::error"],[128,"core::result"],[129,"crossterm::command"],[130,"std::io::error"],[131,"core::fmt"],[132,"clap_builder"],[133,"clap_builder::util::id"],[134,"core::option"],[135,"tracing_core::metadata"],[136,"core::ops::function"],[137,"core::any"],[138,"core::time"],[139,"alloc::string"]],"d":["A helper for the aer! macro.","A helper for the aer! macro.","A macro for building <code>AnyErr</code> reports easily from other …","A macro for creating a TracedErr from a string or another …","Error handling utilities.","Hashing utilities.","Logging utilities","Completely miscellaneous utilities","When working in a function that cannot return a result, …","Spez is a macro used inside our err! macro, need to export …","Time a block of code and log to the global time recorder.","Timing utilities","Warn a user once, with uniqueness determined by the …","Warn a user once, with uniqueness determined by the given …","Contains the error value","Contains the success value","An error type that can be created automatically from any …","A <code>Result&lt;T, E&gt;</code> wrapper shorthand for <code>Result&lt;T, TracedErr&gt;</code>.","","","","","FNV1a hash function. Note this is completely insecure, and …","Only include logs at or above the given level.","A simple clap argument group for controlling the log level …","Write with a custom writer.","Write to files:","Include a specific set of levels.","Write to stdout:","A custom writer for logging, to something other than the …","A target for a specific variation of logging, e.g. stdout, …","Specify which logs should be matched by this layer.","Specify where logs should be written to for a given sub.","","","","","","","","","","","","","","","","","Simple interface to setup a sub and output to a given …","","Executes the given command directly.","The filter to apply to this layer, e.g. …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Include the log location (file and line) in each log, …","Whether to include the active log level in each log, …","Include the timestamp in each log, defaults to false","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the clap log level argument group into a log level …","A regex that must be satisfied for a log to be accepted by …","","When enabled, logs will be formatted more verbosely, but …","Queues the given command for further execution.","Print diagnostics, but nothing else. Disable all logging …","Performs a set of actions within a synchronous update.","","","","","","","","","","","","","","","","","","","","The target to log to, e.g. <code>SubLayerVariant::Stdout {}</code>","Enable verbose logging.","","The fn to handle writing, passed the raw byte string. If …","The directory to hold the log files, e.g. “./logs/”, …","The prefix for the filenames, e.g. “graphs.log” which …","Whether to include the color codes in the output, e.g. for …","The <code>SubCustomWriter</code> struct which is passed the custom …","Returns true if the current process seems to be running in …","A global time recorder, used by the timeit! macro.","A struct for recording time spent in various blocks of …","","","","Format a duration in a human readable format.","Format the logs in a verbose, table format.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new time recorder.","Time a block of code and log to the time recorder.","Using from creation time rather than the specific …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,0,0,1,1,1,1,0,8,0,35,35,8,35,0,0,0,0,18,18,11,35,18,8,9,11,35,18,8,9,8,9,8,9,0,11,9,11,9,18,8,11,35,18,8,9,18,18,18,11,11,11,11,35,18,8,9,18,11,9,11,9,18,9,8,9,11,35,18,8,9,11,35,18,8,9,11,35,18,8,9,18,18,11,18,9,9,36,36,37,37,0,0,0,30,30,30,0,30,30,30,30,30,30,30,30,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[2,3]],0,0,0,[[[5,[4]]],6],0,0,0,0,0,0,0,0,0,0,[7,7],[7,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[9,9],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[12,[11]]],[[13,[0,0]]]],[[],11],[[-1,-2],[[15,[-3,14]]],[],16,[]],0,[9,[[17,[10]]]],[[18,19],20],[[8,19],20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,[[15,[18,22]]]],[21,[[15,[18,22]]]],[[],[[24,[23]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,[[24,[25]]]],0,[9],0,[[-1,-2],[[15,[-3,14]]],[],16,[]],0,[[-1,-2],[[15,[-3,14]]],[],26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[18,21],[[15,[10,22]]]],[[18,21],[[15,[10,22]]]],0,0,[[9,[5,[4]]],[[17,[28]]]],0,0,0,0,0,[[],29],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],30],[31,32],[30,[[13,[32,0]]]],[-1,-1,[]],[-1,-2,[],[]],[[],30],[[30,33,-1],-2,26,[]],[30,[[13,[31,0]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,27,[]]],"c":[],"p":[[6,"TracedErr",14],[8,"Error",122],[8,"Send",123],[15,"u8"],[15,"slice"],[15,"u64"],[3,"Command",124],[4,"SubLayerFilter",23],[3,"SubCustomWriter",23],[15,"tuple"],[3,"SubLayer",23],[3,"Vec",125],[6,"Result",126],[3,"Error",127],[4,"Result",128],[8,"Command",129],[6,"Result",127],[3,"ClapLogLevelArgs",23],[3,"Formatter",130],[6,"Result",130],[3,"ArgMatches",131],[6,"Error",132],[3,"Id",133],[4,"Option",134],[3,"Level",135],[8,"FnOnce",136],[3,"TypeId",137],[15,"usize"],[15,"bool"],[3,"TimeRecorder",107],[3,"Duration",138],[3,"String",139],[15,"str"],[6,"TracedResult",14],[4,"SubLayerVariant",23],[13,"File",102],[13,"Custom",102]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
