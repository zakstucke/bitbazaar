var searchIndex = JSON.parse('{\
"bitbazaar":{"doc":"bitbazaar - An assortment of publicly available …","t":"OOAAAAOOAOODLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLFFHDLLLFLLLLLLLLL","n":["anyerr","err","errors","hash","logging","misc","panic_on_err","timeit","timing","warn_user_once","warn_user_once_by_id","AnyErr","borrow","borrow_mut","default","fmt","fmt","from","into","to_string","try_from","try_into","type_id","fnv1a","ClapLogLevelArgs","GlobalLog","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","builder","flush","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","level","register_global","setup_quick_stdout_global_logging","silent","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","verbose","with_tmp_global","in_ci","is_tcp_port_listening","GLOBAL_TIME_RECORDER","TimeRecorder","borrow","borrow_mut","default","format_duration","format_verbose","from","into","new","timeit","total_elapsed","try_from","try_into","type_id"],"q":[[0,"bitbazaar"],[11,"bitbazaar::errors"],[23,"bitbazaar::hash"],[24,"bitbazaar::logging"],[56,"bitbazaar::misc"],[58,"bitbazaar::timing"],[73,"core::fmt"],[74,"core::fmt"],[75,"core::result"],[76,"core::any"],[77,"clap_builder::builder::command"],[78,"error_stack::result"],[79,"clap_builder::parser::matches::arg_matches"],[80,"clap_builder"],[81,"clap_builder::util::id"],[82,"core::option"],[83,"tracing_core::metadata"],[84,"core::ops::function"],[85,"core::time"]],"d":["A macro for building <code>Report&lt;AnyErr&gt;</code> objects with string …","A macro for building <code>Report&lt;ArbitraryErrorStackErr&gt;</code> …","Error handling utilities.","Hashing utilities.","Logging utilities","Completely miscellaneous utilities","When working in a function that cannot return a result, …","Time a block of code and log to the global time recorder.","Timing utilities","Warn a user once, with uniqueness determined by the …","Warn a user once, with uniqueness determined by the given …","A generic trace_stack error to use when you don’t want …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","FNV1a hash function. Note this is completely insecure, and …","A simple clap argument group for controlling the log level …","The global logger/tracer for stdout, file and full open …","","","","","","","Create a builder to configure the global logger.","Force through logs, traces and metrics, useful in e.g. …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the clap log level argument group into a log level …","Register the logger as the global logger/tracer/metric …","A managed wrapper on creation of the GlobalLog and …","Print diagnostics, but nothing else. Disable all logging …","","","","","","","","","Enable verbose logging.","Temporarily make the logger global, for the duration of …","Returns true if the current process seems to be running in …","Check if a port is listening for a given ipv4 address and …","A global time recorder, used by the timeit! macro.","A struct for recording time spent in various blocks of …","","","","Format a duration in a human readable format.","Format the logs in a verbose, table format.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new time recorder.","Time a block of code and log to the time recorder.","Using from creation time rather than the specific …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,14,14,11,14,11,14,11,11,14,11,14,14,14,14,11,14,14,11,11,14,11,14,11,14,11,14,14,14,14,11,0,0,0,0,24,24,24,0,24,24,24,24,24,24,24,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,2],3],[[1,2],3],[-1,-1,[]],[-1,-2,[],[]],[-1,4,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[[[8,[7]]],9],0,0,[10,10],[10,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[11,[[13,[12,1]]]],[[14,2],3],[-1,-1,[]],[-1,-1,[]],[15,[[5,[14,16]]]],[15,[[5,[14,16]]]],[[],[[18,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[14,[[18,[19]]]],[11,[[13,[12,1]]]],[19,[[13,[12,1]]]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[[14,15],[[5,[12,16]]]],[[14,15],[[5,[12,16]]]],0,[[11,-1],[[13,[-2,1]]],20,[]],[[],21],[[22,23],[[13,[21,1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],24],[25,4],[24,[[13,[4,1]]]],[-1,-1,[]],[-1,-2,[],[]],[[],24],[[24,22,-1],-2,20,[]],[24,[[13,[25,1]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]]],"c":[],"p":[[3,"AnyErr",11],[3,"Formatter",73],[6,"Result",73],[3,"String",74],[4,"Result",75],[3,"TypeId",76],[15,"u8"],[15,"slice"],[15,"u64"],[3,"Command",77],[3,"GlobalLog",24],[15,"tuple"],[6,"Result",78],[3,"ClapLogLevelArgs",24],[3,"ArgMatches",79],[6,"Error",80],[3,"Id",81],[4,"Option",82],[3,"Level",83],[8,"FnOnce",84],[15,"bool"],[15,"str"],[15,"u16"],[3,"TimeRecorder",58],[3,"Duration",85]],"b":[[15,"impl-Debug-for-AnyErr"],[16,"impl-Display-for-AnyErr"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
